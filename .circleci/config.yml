#
# Copyright (C) 2018-2021 to the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

orbs:
  kube-orb: circleci/kubernetes@0.12.1
version: 2.1
jobs:
  build:
    machine: true
    environment:
      _JAVA_OPTIONS: "-Xms4g -Xmx4g"
    steps:
      - checkout
      - restore_cache:
          keys:
            - spring-cloud-kubernetes-{{ .Branch }}-{{ checksum "pom.xml" }}
            - spring-cloud-kubernetes-{{ .Branch }}
            - spring-cloud-kubernetes
      - run:
          name: dependencies
          command: |
            ./mvnw -s .settings.xml -U --fail-never dependency:go-offline || true
      - save_cache:
          paths:
            - ~/.m2
          key: spring-cloud-kubernetes-{{ .Branch }}-{{ checksum "pom.xml" }}
      - run:
          name: Run regular tests
          command: |
            ./mvnw -T 1C -q -s .settings.xml clean install
            find . -type f -regex ".*/spring-cloud-*.*/target/*.*" -exec cp {} $HOME/artifacts/ \;
            find . -type f -regex ".*/target/.*-reports/.*" -exec cp {} $HOME/artifacts/junit/ \;
            bash <(curl -s https://codecov.io/bash)
#      - run:
#          name: Install Snap
#          command: |
#            sudo apt update
#            sudo apt install snapd
#      - kube-orb/install-kubectl
#      - run:
#          name: Run Kind Integration Tests
#          command: |
#            cd spring-cloud-kubernetes-integration-tests
#            ./run.sh
#      - run:
#          name: Launch Kubernetes with microk8s
#          command: |
#            sudo snap install microk8s --classic --channel=1.11/stable
#
#            # wait until a k8s node is ready
#            sleep 10
#            n=0
#            until [ $n -ge 10 ]
#            do
#              (/snap/bin/microk8s.kubectl get no | grep -z "Ready") && break
#              n=$[$n+1]
#              sleep 20
#            done
#
#            echo "Kubernetes cluster launched"
#
#            # Allow intra-pod communication
#            sudo iptables -P FORWARD ACCEPT
#
#            echo n |/snap/bin/microk8s.enable dns registry istio
#
#            # wait until the registry is up and running
#            sleep 10
#            n=0
#            until [ $n -ge 10 ]
#            do
#              (/snap/bin/microk8s.kubectl get pod --namespace=container-registry | grep -z "Running") && break
#              n=$[$n+1]
#              sleep 10
#            done
#
#            echo "Kubernetes Container Registry enabled"
#
#            # wait until istio is up and running
#            sleep 10
#            n=0
#            until [ $n -ge 10 ]
#            do
#              (/snap/bin/microk8s.kubectl get pod -l istio=sidecar-injector --namespace=istio-system | grep -z "Running") && break
#              n=$[$n+1]
#              sleep 10
#            done
#
#            echo "Istio enabled"
#
#            # create the namespace where the istio integration test will run
#            /snap/bin/microk8s.kubectl create -f .circleci/istio-test-namespace.yml
#      - run:
#          name: Run integration tests
#          command: |
#            /snap/bin/microk8s.kubectl config view --raw > /tmp/kubeconfig
#            export KUBECONFIG=/tmp/kubeconfig
#            cd spring-cloud-kubernetes-integration-tests
#            ../mvnw -Ddocker.host='unix:///var/snap/microk8s/current/docker.sock' -Dimage.registry='localhost:32000' clean package fabric8:build verify -Pfmp,it,spring
#      - run:
#          name: "Aggregate test results"
#          when: always
#          command: |
#            mkdir -p ~/junit/
#            find . -type f -regex ".*/target/.*-reports/.*" -exec cp {} ~/junit/ \;
#            bash <(curl -s https://codecov.io/bash)
      - store_artifacts:
          path: ~/junit/
          destination: artifacts
      - store_test_results:
          path: ~/junit/
          destination: testartifacts
notify:
  webhooks:
    - url: https://webhooks.gitter.im/e/22e6bb4eb945dd61ba54
