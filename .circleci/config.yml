#
# Copyright (C) 2018 to the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

orbs:
  kube-orb: circleci/kubernetes@0.11.0
version: 2.1
workflows:
  version: 2
  build-then-test:
    jobs:
      - build
      - test:
          requires:
            - build
jobs:
  test:
    parallelism: 5 # parallel containers to split the tests among
    machine: true
    environment:
      _JAVA_OPTIONS: "-Xms1024m -Xmx2048m"
      _SERVICE_OCCURENCE: 5
    steps:
      - checkout
      - run:
          name: Run regular tests
          command: |
            # | xargs grep -L '@Nested' \
            # find class names that do not have @Nested inside them
            circleci tests glob "**/src/test/**/**.java" \
                               | grep -v 'spring-cloud-kubernetes-integration-tests' \
                               | grep -v '@Nested' \
                               | xargs grep -l '@Test' \
                               | sed 's/.*src.test.java.//g' | sed 's@/@.@g' \
                               | sed 's/.\{5\}$//' \
                               > /tmp/all_tests.txt

            # find classnames that have @Nested inside them
            ROOT_NESTED_CLASSNAMES=$(circleci tests glob "**/src/test/**/**.java" \
                               | grep -v 'spring-cloud-kubernetes-integration-tests' \
                               | xargs grep -l '@Nested' \
                               | xargs grep -l '@Test')

            declare -a 'ARRAY_ROOT_NESTED_CLASSNAMES=($ROOT_NESTED_CLASSNAMES)'

            for p in "${ARRAY_ROOT_NESTED_CLASSNAMES[@]}"; do
            	# find inner @Nested class names
                flattened=$(cat $p | awk '/@Nested/, /@Test/' | tr '\n' ' ' | awk '{ for (i = 1; i <= NF; ++i) { if( $i == "class") { print $(i+1) } } }')
                declare -a 'flat_array=($flattened)'
            	for flat in "${flat_array[@]}"; do
            		x=$(echo $p | sed 's/.*src.test.java.//g' | sed 's@/@.@g' | sed 's/.\{5\}$//')
            		y="$x\$"$flat""
            		echo -e $y >> /tmp/all_tests.txt
            	done
            done

            echo '------'
            cat /tmp/all_tests.txt
            echo '------'

            cat /tmp/all_tests.txt | circleci tests split --split-by=timings > /tmp/this_node_tests.txt
            tr '\n' ',' < /tmp/this_node_tests.txt > /tmp/this_node_tests_comma_separated.txt
            sed -i 's/\\$/\\\\$/' /tmp/this_node_tests_comma_separated.txt

            echo '------- tests for this node ----------'
            cat /tmp/this_node_tests_comma_separated.txt
            echo -e '\n--------------------------------------'
            ./mvnw -s .settings.xml  -DfailIfNoTests=false -DtestsToRun=$(cat /tmp/this_node_tests_comma_separated.txt) -e clean org.jacoco:jacoco-maven-plugin:prepare-agent test -U -P sonar -nsu --batch-mode -Dmaven.test.redirectTestOutputToFile=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
            mkdir -p $HOME/artifacts/junit/
            find . -type f -regex ".*/spring-cloud-*.*/target/*.*" -exec cp {} $HOME/artifacts/ \;
            find . -type f -regex ".*/target/.*-reports/.*" -exec cp {} $HOME/artifacts/junit/ \;
            bash <(curl -s https://codecov.io/bash)
      - kube-orb/install-kubectl
      - attach_workspace:
          at: ./
      - run:
          name: Load Controller Images From Workspace
          command: |
            docker load -i ./docker-images/spring-cloud-kubernetes-configuration-watcher.tar
      - run:
          name: "Aggregate test results"
          when: always
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/target/.*-reports/.*" -exec cp {} ~/junit/ \;
            bash <(curl -s https://codecov.io/bash)
      - store_artifacts:
          path: ~/junit/
          destination: artifacts
      - store_test_results:
          path: ~/junit/
          destination: testartifacts
      - run:
          name: "show test results"
          command: |
            ls -l $CIRCLE_INTERNAL_TASK_DATA/circle-test-results
            cat $CIRCLE_INTERNAL_TASK_DATA/circle-test-results/results.json
  build:
    machine: true
    environment:
      _JAVA_OPTIONS: "-Xms2g -Xmx2g"
      _SERVICE_OCCURENCE: 5
    steps:
      - checkout
      - restore_cache:
          keys:
            - spring-cloud-kubernetes-{{ .Branch }}-{{ checksum "pom.xml" }}
            - spring-cloud-kubernetes-{{ .Branch }}
            - spring-cloud-kubernetes
      - run:
          name: dependencies
          command: |
            ./mvnw -s .settings.xml -U dependency:resolve-plugins dependency:go-offline -B -Dservice.occurence=${_SERVICE_OCCURENCE} || true
      - run:
          name: build
          command: |
            ./mvnw -s .settings.xml clean install -Dservice.occurence=${_SERVICE_OCCURENCE} -DskipTests
      - run:
          name: save docker images
          command: |
            TAG=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
            echo $TAG
            mkdir docker-images
            docker save -o docker-images/spring-cloud-kubernetes-configuration-watcher.tar docker.io/springcloud/spring-cloud-kubernetes-configuration-watcher:${TAG}
      - persist_to_workspace:
          root: ./
          paths: docker-images
      - save_cache:
          paths:
            - ~/.m2
          key: spring-cloud-kubernetes-{{ .Branch }}-{{ checksum "pom.xml" }}
notify:
  webhooks:
    - url: https://webhooks.gitter.im/e/22e6bb4eb945dd61ba54
